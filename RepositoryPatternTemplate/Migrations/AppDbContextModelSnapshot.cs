// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PikiouAPI.Persistence.Contexts;

namespace PikiouAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PikiouAPI.Domain.Models.Courier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("APIKey");

                    b.Property<string>("BussinessId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Couriers");
                });

            modelBuilder.Entity("PikiouAPI.Domain.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourierId");

                    b.Property<int>("OrderId");

                    b.Property<byte>("State");

                    b.Property<string>("TrackingCode");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("OrderId");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("PikiouAPI.Domain.Models.ECommerce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("BussinessId")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ECommerce");
                });

            modelBuilder.Entity("PikiouAPI.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("DeliveryPrice");

                    b.Property<int>("ECommerceId");

                    b.Property<int>("OrdererId");

                    b.HasKey("Id");

                    b.HasIndex("ECommerceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PikiouAPI.Domain.Models.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarCode")
                        .IsRequired();

                    b.Property<int?>("DeliveryId");

                    b.Property<string>("Description")
                        .HasMaxLength(128);

                    b.Property<int>("ECommerceId");

                    b.Property<long>("HeigthCm");

                    b.Property<long>("LengthCm");

                    b.Property<long>("ProductsInPackage");

                    b.Property<float>("WeightKg");

                    b.Property<long>("WidthCm");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("ECommerceId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("PikiouAPI.Domain.Models.Delivery", b =>
                {
                    b.HasOne("PikiouAPI.Domain.Models.Courier", "Courier")
                        .WithMany()
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PikiouAPI.Domain.Models.Order", "Order")
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PikiouAPI.Domain.Models.Order", b =>
                {
                    b.HasOne("PikiouAPI.Domain.Models.ECommerce", "ECommerce")
                        .WithMany("Orders")
                        .HasForeignKey("ECommerceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PikiouAPI.Domain.Models.Package", b =>
                {
                    b.HasOne("PikiouAPI.Domain.Models.Delivery", "Delivery")
                        .WithMany("Packages")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("PikiouAPI.Domain.Models.ECommerce", "ECommerce")
                        .WithMany()
                        .HasForeignKey("ECommerceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
